# Define the services (containers) that make up the application
services:

  # --- Service 1: MongoDB database ---
  mongo:
    image: mongo:6.0                     # Use the official MongoDB image, version 6.0
    container_name: mongo               # Name the container explicitly for easier reference and management
    restart: unless-stopped             # Automatically restart the container unless it is explicitly stopped by the user

    environment:                        # Set environment variables for MongoDB initialization
      MONGO_INITDB_ROOT_USERNAME: admin_user   # Define the initial root username for MongoDB
      MONGO_INITDB_ROOT_PASSWORD: admin123     # Define the initial root password for MongoDB (change in production)

    ports:
      - "27017:27017"                   # Map port 27017 of the host to port 27017 of the container (MongoDB default port)

    volumes:
      - mongodb_data:/data/db           # Mount a named volume for persistent MongoDB data storage
      - ./mongodb/mongo_init.js:/docker-entrypoint-initdb.d/mongo_init.js:ro
                                        # Mount an initialization script to be executed on first MongoDB startup
                                        # ":ro" means read-only, protecting the script from modification

    networks:
      - backend_net                     # Connect this service to the custom network "backend_net"

  # --- Service 2: Python container for data migration ---
  migration:
    build:                              # Build configuration for the custom Python container
      context: .                        # Use the current directory as the build context
      dockerfile: docker/Dockerfile     # Specify the Dockerfile path for building the image

    container_name: migration           # Name the container "migration" for easy reference

    depends_on:
      - mongo                           # Ensure that the "mongo" container starts before "migration" (does NOT wait for readiness)

    environment:
      - MONGO_URI=mongodb://mongo:27017/   # Set the MongoDB URI (internal hostname "mongo" is resolvable within the network)

    volumes:
      - ./data:/app/data                # Mount the local "data" folder into the container (e.g., for CSV files)
      - ./scripts:/app/scripts          # Mount Python scripts into the container
      - ./logs:/app/logs                # Mount a logs folder to store logs generated by the scripts
      - ./requirements.txt:/app/requirements.txt   # Mount the Python dependencies file into the container
      - .env:/app/.env                  # Mount the .env file for additional environment variables (e.g., secrets, config)

    networks:
      - backend_net                     # Connect this container to the same custom network as "mongo"

# --- Volumes section: define named persistent storage volumes ---
volumes:
  mongodb_data:                         # Named volume used to persist MongoDB data even if the container is deleted

# --- Networks section: define a custom user-defined bridge network ---
networks:
  backend_net:                          # Create a named network "backend_net" for controlled inter-service communication
    driver: bridge                      # Use the default "bridge" driver for single-host communication (default for Docker Compose)